<%- content_for :title, "Page Layouts" -%>

<div class="spacing">

  <div class="content-spacing">
    <p>Page layouts by default live in <code>application.html.erb</code> and will get injected in to the global template.</p>
    <p>The general idea of this file is to have a consistent application layout that has a set of areas where content can dynamically appear, then in your view you define which layout gets used by implementing a <code>yield</code> where needed.</p>
  </div>

  <hr />

  <h2 class="heading-two">Sidebar</h2>

  <div class="content-spacing content-lists">
    <p>You can throw things in to a sidebar layout by using the <code>:sidebar</code> yield:</p>
  </div>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "sidebar_left", ruby: capture { -%>
&lt;%- content_for :sidebar do -%>
  &lt;div class="panel panel__passive">
    Panel in sidebar
  &lt;/div>
&lt;%- end -%>

Content
  <%- } } do -%>
<div class="page page__with-sidebar">
  <div class="page--sidebar">
    <div class="panel panel__passive">
      Panel in sidebar
    </div>
  </div>
  <main class="page--main" role="main" id="main">
    Content
  </main>
</div>
  <%- end -%>

  <hr />

  <div class="content-spacing content-lists">
    <h2 class="heading-two">Sidebar on the right</h2>

    <div class="content-spacing content-lists">
      <p>You can put the content on the right by yielding anything to <code>page_reversed</code>.</p>
    </div>
  </div>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "sidebar_right", ruby: capture { -%>
&lt;% content_for :page_reversed, true %>
&lt;% content_for :sidebar do %>
  &lt;div class="panel panel__passive">
    Panel in sidebar
  &lt;/div>
&lt;% end %>

Content
  <%- } } do -%>
<div class="page page__with-sidebar page__reversed">
  <div class="page--sidebar">
    <div class="panel panel__passive">
      Panel in sidebar
    </div>
  </div>
  <main class="page--main" role="main" id="main">
    Content
  </main>
</div>
  <%- end -%>

  <hr />

  <div class="content-spacing content-lists">
    <h2 class="heading-two">Full-width</h2>

    <p>Yield anything to <code>:page_fullwidth</code> to break out of the default padding of the page.</p>

    <p>If you know that the site you're building is going to be mostly or always full-width, I'd suggest modifying the behaviour of the <code>is_fullwidth</code> flag in the application template.</p>

    <p>There are some handy helper classes that can help in building full-width layouts:</p>

    <ul>
      <li>
        <code>layout--container</code> is an out-of-the-box default container.<br />
        This can be used when you have a full-width coloured box with some content inside of it that should align with the rest of the text on the page.
      </li>
      <li>
        <code>section</code> can be used to add a dividers between blocks consecutive sections.
      </li>
    </ul>
  </div>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "above_below", ruby: capture { -%>
&lt;% content_for :page_fullwidth, true %>

&lt;div class="section homepage--banner">
  Section one full-width
&lt;/div>
&lt;div class="section homepage--content">
  &lt;div class="layout--container content">
    &lt;p>Section two inside a layout container&lt;/p>
  &lt;/div>
&lt;/div>
&lt;div class="section homepage--banner">
  Section three full-width
&lt;/div>
  <%- } } do -%>
<div class="section">
  Section one full-width
</div>
<div class="section">
  <div class="layout--container content">
    <p>Section two inside a layout container</p>
  </div>
</div>
<div class="section">
  Section three full-width
</div>
  <%- end -%>

  <hr />

  <div class="content-spacing content-lists">
    <h2 class="heading-two">Enhancing</h2>

    <div class="content-spacing">
      <p>As with all things Ornament, you are welcome to enhance this file with more variations that are used when different yields are called. The Ornament defaults aren't always going to 100% match your use-cases, so it's there to be tampered with.</p>
      <p>Alternatively you also have the opportunity to implement entirely new <code>layout/*.html.erb</code> files as is the standard Railsy way if that is more your style.</p>
    </div>
  </div>

</div>
