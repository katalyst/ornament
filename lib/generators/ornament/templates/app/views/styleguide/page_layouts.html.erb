<%- content_for :title, "Page Layouts" -%>

<div class="spacing">

  <div class="content-spacing">
    <p>Page layouts by default live in <code>application.html.erb</code> and will get injected in to the global template.</p>
    <p>The general idea of this file is to have a consistent application layout that has a set of areas where content can dynamically appear, then in your view you define which layout gets used by implementing a <code>yield</code> where needed.</p>
  </div>

  <hr />

  <h2 class="heading-two">Sidebar</h2>

  <div class="content-spacing content-lists">
    <p>You can throw things in to a sidebar layout by using the <code>:sidebar</code> yield:</p>
  </div>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "sidebar_left", ruby: capture { -%>
&lt;%- content_for :sidebar do -%>
  &lt;div class="panel panel__passive">
    Panel in sidebar
  &lt;/div>
&lt;%- end -%>

Content
  <%- } } do -%>
<div class="page__with-sidebar">
  <div class="page--main">
    Content
  </div>
  <div class="page--sidebar">
    <div class="panel panel__passive">
      Panel in sidebar
    </div>
  </div>
</div>
  <%- end -%>

  <hr />
  <h2 class="heading-two">Sidebar right</h2>

  <div class="content-spacing content-lists">
    <p>You can put the content on the right by changing the yield to <code>:sidebar_right</code>.</p>
  </div>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "sidebar_right", ruby: capture { -%>
&lt;%- content_for :sidebar_right do -%>
  &lt;div class="panel panel__passive">
    Panel in sidebar
  &lt;/div>
&lt;%- end -%>

Content
  <%- } } do -%>
<div class="page__with-sidebar-right">
  <div class="page--main">
    Content
  </div>
  <div class="page--sidebar">
    <div class="panel panel__passive">
      Panel in sidebar
    </div>
  </div>
</div>
  <%- end -%>

  <hr />

  <div class="content-spacing content-lists">
    <h2 class="heading-two">Full-width</h2>

    <p>You can break out of the layout-container by yielding directly to either <code>:above_layout</code> or <code>:below_layout</code>. If you only want a single full-width yield, make sure you don't accidentally yield anything outside of either of those yields otherwise you may end up with a gap where the page layout would normally be.</p>

    <p>Anything yielded to the before or after yields will not come with any sort of padding or out of the box styling, it's essentially giving you the keys to building an entirely unique layout for a specific view.</p>

    <p>This can be convenient for things like a homepage, where you might have a series of full-width modules running down the page, while your inner pages should be the standard left/right two column layout.</p>

    <p>There are some handy helper classes that can help in building full-width layouts:</p>

    <ul>
      <li>
        <code>layout--container</code> is an out-of-the-box default container.<br />
        This can be used when you have a full-width coloured box with some content inside of it that should align with the rest of the text on the page.
      </li>
      <li>
        <code>section</code> can be used to add a dividers between blocks consecutive sections.
      </li>
    </ul>
  </div>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "above_below", ruby: capture { -%>
&lt;%- content_for :above_layout do -%>
  &lt;div class="section homepage--banner">
    Section one full-width
  &lt;/div>
  &lt;div class="section homepage--content">
    &lt;div class="layout--container content">
      &lt;p>Section two inside a layout container&lt;/p>
    &lt;/div>
  &lt;/div>
&lt;%- end -%>
  <%- } } do -%>
<div class="section">
  Section one full-width
</div>
<div class="section">
  <div class="layout--container content">
    <p>Section two inside a layout container</p>
  </div>
</div>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Enhancing</h2>

  <div class="content-spacing">
    <p>As with all things Ornament, you are welcome to enhance this file with more variations that are used when different yields are called. The Ornament defaults aren't always going to 100% match your use-cases, so it's there to be tampered with.</p>
    <p>Alternatively you also have the opportunity to implement entirely new <code>layout/*.html.erb</code> files as is the standard Railsy way if that is more your style.</p>
  </div>

</div>
