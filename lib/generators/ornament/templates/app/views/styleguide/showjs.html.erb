<% content_for :title, "Show.js" %>

<%= simple_form_for :form, url: "/styleguide/form", remote: true do |f| %>
<div class="content-spacing">

  <h2 class="heading-two">Basic example</h2>

  <p>You can show hidden elements based on form field selections. All you need to do is add a <code>data-show</code> attribute to the element you want to show/hide and set the value to the be ID of the form field that you want to control it with.</p>

  <p>In this first example, we have two radio buttons. One with the ID of <code>showjs_example_1_true</code> and the second with the ID of <code>showjs_example_1_false</code>. If we want to show the hidden field when selecting the true radio, we add <code>data-show="showjs_example_1_true"</code> to the hidden field.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-example-1", ruby: capture { -%>
&lt;%= f.input :example, as: :radio_buttons %>
&lt;%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_example_true" } } %>
  <%- } } do -%>
<div class="inputs">
  <%= f.input :basic_example, as: :radio_buttons, label: "Show hidden field?", required: false, wrapper_html: { class: "form--horizontal" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_basic_example_true" } } %>
</div>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Toggling multiple fields</h2>

  <p>Sometimes you might want to toggle a group of fields together. Rather than adding the <code>data-show</code> attribute to each of the element wrappers, you can wrap them all in a <code>div</code> with the fields in it. You will need to make sure you add the <code>inputs</code> class on it to retain the spacing.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-multi", ruby: capture { -%>
&lt;%= f.input :example, as: :radio_buttons -%&gt;
&lt;div class="inputs" data-show="form_example_true">
  &lt;%= f.input :hidden_field_1 -%&gt;
  &lt;%= f.input :hidden_field_2 -%&gt;
&lt;/div>
  <%- } } do -%>
<div class="inputs">
  <%= f.input :multiple, as: :radio_buttons, label: "Show hidden field?", required: false, wrapper_html: { class: "form--horizontal" } %>
  <div class="inputs" data-show="form_multiple_true">
    <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small" } %>
    <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small" } %>
  </div>
</div>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Requiring multiple matches (AND)</h2>

  <p>You can string multiple IDs together by seperating them with <code>_&_</code>. For example if I wanted to match against <code>turtles_raphael</code>Â and <code>turtles_donatello</code> I would use <code>turtles_raphael_&_turtles_donatello</code>.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-multi-option-1" } do -%>
<div class="inputs">
  <%= f.input :multiple_and, as: :check_boxes, collection: ["Leonardo", "Donatello", "Raphael", "Michaelangelo"], label: "Select Donatello AND Raphael", required: false, wrapper_html: { class: "form--horizontal" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_multiple_and_raphael_&_form_multiple_and_donatello" } } %>
</div>
  <%- end -%>  

  <hr />

  <h2 class="heading-two">Requiring multiple matches (OR)</h2>

  <p>Follow the instructions for AND matching above, but also add in <code>data-show-type="any"</code>.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-multi-option-2" } do -%>
<div class="inputs">
  <%= f.input :multiple_or, as: :check_boxes, collection: ["Leonardo", "Donatello", "Raphael", "Michaelangelo"], label: "Select Donatello OR Raphael", required: false, wrapper_html: { class: "form--horizontal" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_multiple_or_raphael_&_form_multiple_or_donatello", show_type: "any" } } %>
</div>
  <%- end -%>  

  <hr />

  <h2 class="heading-two">Select menu</h2>

  <p>While most of the use-cases for show.js will be checkboxes or radios there is support for other field types.</p>

  <p>To show elements based on a select menu selection, you can use <code>data-show-option</code> and use the value of the option as the value for the attribute. Eg <code>&lt;option value="test"></code> will be <code>data-show-option="test"</code>.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-select" } do -%>
<div class="inputs">
  <%= f.input :select, as: :select, collection: (1..5), label: "Select \"3\" to show the hidden field", required: false, prompt: "Please select", input_html: { class: "form--auto" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_select", show_option: "3" } } %>
</div>
  <%- end -%>

  <p>You can match against labels rather than values by using <code>data-show-option-text</code>.</p>
  <p>Here you can see the value required is 3, but the label is "three" which is what we're testing against.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-select-label" } do -%>
<div class="inputs">
  <%= f.input :select_label, as: :select, collection: { "one" => 1, "two" => 2, "three" => 3, "four" => 4, "five" => 5 }, label: "Select \"three\" to show the hidden field", required: false, prompt: "Please select", input_html: { class: "form--auto" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_select_label", show_option: "three", show_option_text: "" } } %>
</div>
  <%- end -%>

  <p>Multiple selects with the same value by using the <code>_&_</code> syntax to define the fields, and set the single <code>data-show-option</code> value on the hidden field.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-select-2" } do -%>
<div class="inputs">
  <%= f.input :multiselect_1, as: :select, collection: ["Yes", "No"], label: "Answer Yes", required: false, prompt: "Please select", input_html: { class: "form--auto" } %>
  <%= f.input :multiselect_2, as: :select, collection: ["Yes", "No"], label: "Answer Yes again", required: false, prompt: "Please select", input_html: { class: "form--auto" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_multiselect_1_&_form_multiselect_2", show_option: "Yes" } } %>
</div>
  <%- end -%>

  <p>Multiple selects with different values by using the <code>_&_</code> syntax for the <code>data-show-option</code> attribute. Make sure that you're passing in the same number of <code>data-show</code> and <code>data-show-option</code> items. If there aren't enough values it will assume the value needs to be "true".</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-select-3" } do -%>
<div class="inputs">
  <%= f.input :multiselect_3, as: :select, collection: ["Yes", "No"], label: "Answer Yes", required: false, prompt: "Please select", input_html: { class: "form--auto" } %>
  <%= f.input :multiselect_4, as: :select, collection: ["Yes", "No"], label: "Answer No", required: false, prompt: "Please select", input_html: { class: "form--auto" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_multiselect_3_&_form_multiselect_4", show_option: "Yes_&_No" } } %>
</div>
  <%- end -%>

  <p>If you need multiple options from a single select menu, simply use the <code>_&_</code> syntax inside the <code>data-show-option</code> value: 

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-select-4" } do -%>
<div class="inputs">
  <%= f.input :multiselect_value, as: :select, collection: (1..5), label: "Answer 2 or 4", required: false, prompt: "Please select", input_html: { class: "form--auto" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_multiselect_value", show_option: "2_&_4" } } %>
</div>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Text matches</h2>

  <p>You can match against text input by using <code>data-show-input</code>. This match will be exact, but case insensitive. What that means is that if you're looking for "Hello World" it will match for "hello world" but won't match for "hello" or "hello world!"</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-text" } do -%>
<div class="inputs">
  <%= f.input :text_match, label: "Type \"Hello World\" (without quotes, case insensitive)", required: false, wrapper_html: { class: "form--medium" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_text_match", show_input: "hello world" } } %>
</div>
  <%- end -%>

  <p>You can fuzzy match text by adding the <code>data-show-type="any"</code> attribute.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-text-fuzzy" } do -%>
<div class="inputs">
  <%= f.input :text_match_fuzzy, label: "Type anything that includes the word \"hello\" (without quotes, case insensitive)", required: false, wrapper_html: { class: "form--medium" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_text_match_fuzzy", show_input: "hello", show_type: "any" } } %>
</div>
  <%- end -%>

  <p>You can match any input by using just the <code>data-show</code> attribute by itself.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-text-any" } do -%>
<div class="inputs">
  <%= f.input :text_match_any, label: "Type anything", required: false, wrapper_html: { class: "form--medium" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_text_match_any" } } %>
</div>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Inverting matches</h2>

  <p>Sometimes you want to show a field by default, and hide it if something is selected. This can be done by adding <code>data-show-inverse</code> to your hidden element. </p>

  <p><em>Note:</em> Prior to Ornament v1.2.0 the attribute would need to be <code>data-show-inverse="1"</code></p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-inverse-1" } do -%>
<div class="inputs">
  <%= f.input :inverse_multiple_and, as: :check_boxes, collection: ["Leonardo", "Donatello", "Raphael", "Michaelangelo"], label: "Select Donatello AND Raphael to hide the field", required: false, wrapper_html: { class: "form--horizontal" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_inverse_multiple_and_raphael_&_form_inverse_multiple_and_donatello", show_inverse: "" } } %>
</div>
  <%- end -%>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-inverse-2" } do -%>
<div class="inputs">
  <%= f.input :inverse_multiple_or, as: :check_boxes, collection: ["Leonardo", "Donatello", "Raphael", "Michaelangelo"], label: "Select Donatello OR Raphael to hide the field", required: false, wrapper_html: { class: "form--horizontal" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_inverse_multiple_or_raphael_&_form_inverse_multiple_or_donatello", show_type: "any", show_inverse: "" } } %>
</div>
  <%- end -%>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-inverse-3" } do -%>
<div class="inputs">
  <%= f.input :inverse_select, as: :select, collection: (1..5), label: "Select \"3\" to hide the field", required: false, prompt: "Please select", input_html: { class: "form--auto" } %>
  <%= f.input :hidden_field, required: false, wrapper_html: { class: "form--small", data: { show: "form_inverse_select", show_option: "3", show_inverse: "" } } %>
</div>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Emptying data when hiding</h2>

  <p>Sometimes you might want to prevent the data from sending to the server when the field is hidden. You can add <code>data-show-destroy</code> to empty out any fields that are hidden.</p>

  <p>Try showing this field, entering in some data and then toggle the field off and back on again, you'll notice the fields are now empty.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-destroy", ruby: capture { -%>
&lt;%= f.input :example, as: :radios -%&gt;
&lt;%= f.input :hidden_field, wrapper_html: { data: { show: "form_example_true", show_destroy: "" } } -%&gt;
  <%- } } do -%>
<div class="inputs">
  <%= f.input :destroy, as: :radio_buttons, label: "Show hidden field?", required: false, wrapper_html: { class: "form--horizontal" } %>
  <div class="inputs" data-show="form_destroy_true" data-show-destroy>
    <%= f.input :destroy_hidden_field_one, required: false, input_html: { class: "form--small" } %>
    <%= f.input :destroy_hidden_field_two, as: :select, collection: (1..4), prompt: "Please select", required: false, input_html: { class: "form--small" } %>
    <%= f.input :destroy_hidden_field_three, as: :check_boxes, required: false, wrapper_html: { class: "form--horizontal" } %>
    <%= f.input :destroy_hidden_field_four, as: :radio_buttons, required: false, wrapper_html: { class: "form--horizontal" } %>
  </div>
</div>
  <%- end -%>

  <hr />
  <h2 class="heading-two">Disabling fields when hiding</h2>

  <p>Another option for not sending data to the server is to disable the fields when unchecked. This will keep the data present for the user if they change their minds, but won't submit. </p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "showjs-disable", ruby: capture { -%>
&lt;%= f.input :example, as: :radio_buttons -%&gt;
&lt;%= f.input :hidden_field, wrapper_html: { data: { show: "form_example_true", show_disable: "" } } -%&gt;
  <%- } } do -%>
<div class="inputs">
  <%= f.input :disabling, as: :radio_buttons, label: "Show hidden field?", required: false, wrapper_html: { class: "form--horizontal" } %>
  <div class="inputs" data-show="form_disabling_true" data-show-disable>
    <%= f.input :disable_hidden_field_one, required: false, input_html: { class: "form--small" } %>
    <%= f.input :disable_hidden_field_two, as: :select, collection: (1..4), prompt: "Please select", required: false, input_html: { class: "form--small" } %>
    <%= f.input :disable_hidden_field_three, as: :check_boxes, required: false, wrapper_html: { class: "form--horizontal" } %>
    <%= f.input :disable_hidden_field_four, as: :radio_buttons, required: false, wrapper_html: { class: "form--horizontal" } %>
  </div>
</div>
  <%- end -%>

</div>
<% end %>