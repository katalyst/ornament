
<% content_for :title, "Form styles" %>

<% content_for :js_billing_to_shipping do %>
  Ornament.onLoad(function(){
    Ornament.C.FormBillingToShipping.create("#test_form_use_billing_address", {
      "#test_form_billing_address_1": "#test_form_shipping_address_1",
      "#test_form_billing_address_2": "#test_form_shipping_address_2",
      "#test_form_billing_state": "#test_form_shipping_state",
      "#test_form_billing_country": "#test_form_shipping_country"
    });
  });
<% end %>

<% content_for :scripts_bottom do %>
  <script>
    $(document).on("ornament:refresh", function(){ 
      !Ornament.C.FormDatepicker.enabled && $("[data-jquery-modifiers]").hide();
    });
    <%= yield :js_billing_to_shipping -%>
  </script>
<% end %>

<div class="content-spacing">
  <%= simple_form_for :test_form, url: "/styleguide/form", remote: true do |f| %>

  <div class="panel panel__passive panel--padding">
    <em>Note: Ornament assumes you are using simple_form to generate form fields.</em>
  </div>

  <hr />

  <h2 class="heading-two">Spacing out fields</h2>

  <p>All fields are spaced using the <code>inputs</code> class.</p>
  <p>The <code>inputs</code> class only affects direct children, so any nested inputs will need another <code>inputs</code> class.</p>
  <p>You can space any buttons away from the inputs above by using the <code>actions</code> class.</p>

  <p>Error blocks should live inside the <code>inputs</code> class as it will space it out from the fields as well.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-spacing", ruby: capture { -%>
&lt;div class="inputs">
  &lt;%- unless f.error_notification.blank? -%>
    &lt;%= f.error_notification %>
  &lt;%- end -%>
  &lt;%= f.input :sample_field_1, input_html: { class: "form--medium" } %>
  &lt;%= f.input :sample_field_2, input_html: { class: "form--medium" } %>
&lt;/div>
&lt;div class="actions">
  &lt;%= f.button :button, "Submit" -%&gt;
&lt;/div>
  <%- } } do -%>
<div class="inputs">
  <div class="panel__error panel--padding">
    Errors were found!
  </div>
  <%= f.input :sample_field_1, input_html: { class: "form--medium" } %>
  <%= f.input :sample_field_2, input_html: { class: "form--medium" } %>
</div>
<div class="actions">
  <button class="button">Submit</button>
</div>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Form field lengths</h2>

  <p>Field lengths can be controlled with <code>form--*</code> classes.</p>

  <p>You can add these classes to the input directly to only size the input, or you can add the class to the wrapper to size the input along with any hints, labels, error messages etc. that are associated.</p>

  <p>The available lengths are:</p>

  <div class="inputs">
    <%= f.input :size_large,  required: false, label: "<code>.form--large</code>".html_safe, input_html: { class: "form--large" } %>
    <%= f.input :size_medium, required: false, label: "<code>.form--medium</code>".html_safe, input_html: { class: "form--medium" } %>
    <%= f.input :size_small,  required: false, label: "<code>.form--small</code>".html_safe, input_html: { class: "form--small" } %>
    <%= f.input :size_x_small,required: false, label: "<code>.form--x-small</code>".html_safe, input_html: { class: "form--x-small" } %>
    <%= f.input :size_auto,   required: false, label: "<code>.form--auto</code>".html_safe, input_html: { class: "form--auto" }, as: :select, collection: ["Lorem", "Ipsum"], prompt: "Please select" %>
  </div>

  <p>If you want a thinner input field, you can use <code>.input__tight</code>:</p>

  <%= f.input :size_tight, required: false, label: "<code>.form--x-small.input__tight</code>".html_safe, input_html: { class: "form--x-small input__tight" } %>

  <hr />

  <h2 class="heading-two">Field modifiers</h2>

  <p>Placeholders are added with the <code>placeholder</code> input attribute.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-modifiers-placeholder", ruby: capture { -%>
&lt;%= f.input :with_placeholder, placeholder: "Example placeholder", input_html: { class: "form--medium" } %>
  <%- } } do -%>
<%= f.input :with_placeholder, placeholder: "Example placeholder", input_html: { class: "form--medium" } %>
  <%- end -%>

  <p>Hints appear inside the label element just after the text for the label and use the class <code>hint-block</code>.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-modifiers-hint", ruby: capture { -%>
&lt;%= f.input :with_hint, hint: "This is a hint message.", input_html: { class: "form--medium" } %>
  <%- } } do -%>
<%= f.input :with_hint, hint: "This is a hint message.", input_html: { class: "form--medium" } %>
  <%- end -%>

  <p>Errors appear inline next to labels and use the <code>error-block</code> class.</p>
  <p>The wrapper should also get the class of <code>error</code> to colour the label.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-modifiers-error", ruby: capture { -%>
&lt;%= f.input :example, error: "Example Error" -%&gt;
  <%- } } do -%>
<div class="control-group string required form--medium error">
  <div class='control-group--label'>
    <label class="string required control-label" for="modifier-error">
      <abbr title="required">*</abbr> With error<span class='error-block'>can't be blank</span>
    </label>
  </div>
  <div class="controls">
    <input class="string required" id="modifier-error" type="text">
  </div>
</div>
  <%- end -%>

  <p>Disabled fields use the <code>disabled</code> input attribute.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "disabled", ruby: capture { -%>
&lt;%= f.input :disabled_field, disabled: true, input_html: { class: "form--medium" } -%&gt;
  <%- } } do -%>
<%= f.input :disabled_field, disabled: true, input_html: { class: "form--medium" } %>
  <%- end -%>

  <p>Similarly, read-only fields use the <code>readonly</code> input attribute.</p>
  <p>Be aware of the <a href="http://stackoverflow.com/questions/7730695/whats-the-difference-between-disabled-disabled-and-readonly-readonly-for-ht">difference between readonly and disabled</a> and use the correct one where appropriate.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "readonly", ruby: capture { -%>
&lt;%= f.input :readonly_field, readonly: true, input_html: { class: "form--medium" } %>
  <%- } } do -%>
<%= f.input :readonly_field, readonly: true, input_html: { class: "form--medium" } %>

  <%- end -%>

  <div data-jquery-modifiers>
    <p>jQuery Datepicker can be added by giving your input field the class <code>datepicker</code>.</p>

    <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-modifiers-disabled", ruby: capture { -%>
&lt;%= f.input :datepicker, input_html: { class: "datepicker form--medium" } %>
    <%- } } do -%>
<%= f.input :datepicker, input_html: { class: "datepicker form--medium" } %>
    <%- end -%>

    <p>Alternatively there's also a datetimepicker using the <code>datetimepicker</code> class.</p>

    <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-modifiers-disabled", ruby: capture { -%>
&lt;%= f.input :example, input_html: { class: "datetimepicker form--medium" } %>
    <%- } } do -%>
<%= f.input :datetimepicker, input_html: { class: "datetimepicker form--medium" } %>
    <%- end -%>

    <p>You can customise the settings of your datepicker by passing in data attributes in the format of <code>data-datepicker-&lt;setting>=""</code>. eg. <code>data-datepicker-changemonth="false"</code>.</p>
    
  </div>

  <hr />

  <h2 class="heading-two">Radios and checkboxes</h2>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-checkboxes", ruby: capture { -%>
&lt;%= f.input :basic_checkboxes, as: :check_boxes -%&gt;
  <%- } } do -%>
<%= f.input :basic_checkboxes, as: :check_boxes %>
  <%- end -%>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-radios", ruby: capture { -%>
&lt;%= f.input :basic_radios, as: :radio_buttons -%&gt;
  <%- } } do -%>
<%= f.input :basic_radios, as: :radio_buttons %>
  <%- end -%>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-horizontal-radios", ruby: capture { -%>
&lt;%= f.input :hotizontal_checkboxes, as: :check_boxes, wrapper_html: { class: "form--horizontal" } %>
  <%- } } do -%>
<%= f.input :hotizontal_checkboxes, as: :check_boxes, wrapper_html: { class: "form--horizontal" } %>
  <%- end -%>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-single-checkbox", ruby: capture { -%>
&lt;%= f.input :example, as: :boolean -%&gt;
  <%- } } do -%>
<%= f.input :single_boolean, as: :boolean %>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Enhanced Radios and checkboxes</h2>

  <p>Note: falls back to regular radios/checkboxes in IE8</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-checkboxes-enhanced", ruby: capture { -%>
&lt;%= f.input :ehanced_checkboxes, as: :check_boxes, wrapper_html: { class: "form--enhanced" } -%&gt;
  <%- } } do -%>
<%= f.input :ehanced_checkboxes, as: :check_boxes, wrapper_html: { class: "form--enhanced" } %>
  <%- end -%>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-radios-enhanced", ruby: capture { -%>
&lt;%= f.input :ehanced_radios, as: :radio_buttons, wrapper_html: { class: "form--enhanced" } -%&gt;
  <%- } } do -%>
<%= f.input :ehanced_radios, as: :radio_buttons, wrapper_html: { class: "form--enhanced" } %>
  <%- end -%>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-horizontal-radios-enhanced", ruby: capture { -%>
&lt;%= f.input :ehanced_horizontal, as: :check_boxes, wrapper_html: { class: "form--enhanced form--horizontal" } -%&gt;
  <%- } } do -%>
<%= f.input :ehanced_horizontal, as: :check_boxes, wrapper_html: { class: "form--enhanced form--horizontal" } %>
  <%- end -%>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-single-checkbox-enhanced", ruby: capture { -%>
&lt;%= f.input :example, as: :boolean, wrapper_html: { class: "form--enhanced" } -%&gt;
  <%- } } do -%>
<%= f.input :enhanced_boolean, as: :boolean, wrapper_html: { class: "form--enhanced" } %>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Simple Cocoon Fields</h2>

  <p>Here is a quick way to markup your cocoon fields in rails to make them look a bit nicer by default.</p>

<%- cocoon_field = capture { -%>
<div class='nested-fields control-group select'>
  <div class="control-group--label">
    <label class="control-label">My Nested Field</label>
  </div>
  <div class="controls cocoon-field form--medium">
    <div class="cocoon-field--field">
      <select>
        <option>Option 1</option>
        <option>Option 2</option>
        <option>Option 3</option>
      </select>
    </div>
    <div class="cocoon-field--remove">
      <button>Remove field</button>
    </div>
  </div>
</div>
<%- } -%>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-cocoon", ruby: capture { -%>
&lt;div class='nested-fields control-group select'>
  &lt;%= f.label :my_nested_field %>
  &lt;%= f.hint :my_nested_field -%>
  &lt;%= f.error :my_nested_field -%>
  &lt;div class="controls cocoon-field form--medium">
    &lt;div class="cocoon-field--field">
      &lt;%= f.input_field :my_nested_field, collection: data_source, label_method: :title, value_method: :id, include_blank: true %>
    &lt;/div>
    &lt;div class="cocoon-field--remove">
      &lt;%= link_to_remove_association "Remove", f %>
    &lt;/div>
  &lt;/div>
&lt;/div>
  <%- } } do -%>
<%= cocoon_field -%>
  <%- end -%>

  <p>And to space out your cocoon fields, simply update your wrapper to add the inputs field, and add a button class to your add button:</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-cocoon", ruby: capture { -%>
&lt;div class='my_nested_fields inputs'>
  &lt;%= f.simple_fields_for :my_nested_fields do |nested_field| -%>
    &lt;%= render 'my_nested_fields', f: nested_field| -%>
  &lt;%- end -%>
  &lt;div>
    &lt;%= link_to_add_association 'Add', f, :my_nested_fields, class: "button" -%>
  &lt;/div>
&lt;/div>
  <%- } } do -%>
<div class='my_nested_fields inputs'>
  <%= cocoon_field -%>
  <%= cocoon_field -%>
  <%= cocoon_field -%>
  <div>
    <button class="button">Add</button>
  </div>
</div>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Limited text fields</h2>

  <p>You can limit text fields by adding a <code>data-limiter</code> attribute. The value sent to the attribute is the number of characters you want to limit the field to. eg:</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-limiter", ruby: capture { -%>
&lt;%= f.input :example, input_html: { data: { limiter: 30 } } -%&gt;
  <%- } } do -%>
<div class="inputs">
  <%= f.input :character_limited_string, input_html: { class: "form--medium", data: { limiter: 30 } } %>
  <%= f.input :character_limited_text, as: :text, input_html: { class: "form--medium", data: { limiter: 200 } } %>
</div>
  <%- end -%>

  <p>You can limit by words instead of letters by adding in the <code>data-limiter-word</code> attribute.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-word-limiter", ruby: capture { -%>
&lt;%= f.input :example, input_html: { data: { limiter: 30, limiter_word: "" } } -%&gt;
  <%- } } do -%>
<div class="inputs">
  <%= f.input :word_limited_string, input_html: { class: "form--medium", data: { limiter: 3, limiter_word: "" } } %>
  <%= f.input :word_limited_text, as: :text, input_html: { class: "form--medium", data: { limiter: 10, limiter_word: "" } } %>
</div>
  <%- end -%>

  <p>Both word and character limiter has a "micro" styling option by adding <code>data-limiter-micro</code> to your input.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-limiter-micro", ruby: capture { -%>
&lt;%= f.input :example, input_html: { data: { limiter: 30, limiter_micro: "" } } -%&gt;
  <%- } } do -%>
<div class="inputs">
  <%= f.input :character_limited_string_micro, input_html: { class: "form--medium", data: { limiter: 30, limiter_micro: "" } } %>
  <%= f.input :character_limited_text_micro, as: :text, input_html: { class: "form--medium", data: { limiter: 200, limiter_micro: "" } } %>
  <%= f.input :word_limited_string_micro, input_html: { class: "form--medium", data: { limiter: 3, limiter_word: "", limiter_micro: "" } } %>
  <%= f.input :word_limited_text_micro, as: :text, input_html: { class: "form--medium", data: { limiter: 10, limiter_word: "", limiter_micro: "" } } %>
</div>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Password Revealer</h2>

  <p>Use <code>data-password-reveal</code> on your input field to add a reveal button. This will toggle the input type between text and password.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "password-reveal", ruby: capture { -%>
&lt;%= f.input :password_revealer, wrapper_html: { class: "form--medium" }, input_html: { data: { password_reveal: "" } } %>
  <%- } } do -%>
<%= f.input :password_revealer, wrapper_html: { class: "form--medium" }, input_html: { data: { password_reveal: "" } } %>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Password Score</h2>

  <p>Requires the <a href="https://github.com/dropbox/zxcvbn">zxcvbn gem</a>, and this line to be added to your <code>core.js</code>:<br />
  <code>//= require zxcvbn-async</code></p>

  <p>Without zxcvbn, it will operate in demo mode as you can see here, which will return a random score on field change.</p>

  <div class="panel__alert panel--padding">
    <p>Be aware if you are using zxcvbn-ruby for server-side validation that the JS and ruby implementations <a href="https://github.com/envato/zxcvbn-ruby/issues/18" target="_blank">have different results</a>.</p>
  </div>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-password-score", ruby: capture { -%>
&lt;%= f.input :password_score, wrapper_html: { class: "form--medium", data: { password_score: "" } } %>
  <%- } } do -%>
<%= f.input :password_score, wrapper_html: { class: "form--medium", data: { password_score: "" } } %>
  <%- end -%>

  <p>You can customise the label under the field by using <code>data-password-score-label</code>. Here's an example with a custom label, using one of the form sizing classes and the password revealer for good measure.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-password-score-2", ruby: capture { -%>
&lt;%= f.input :password_score_custom, wrapper_html: { class: "form--medium", data: { password_score: "", password_score_label: "<('.' <)" } }, input_html: { data: { password_reveal: "" } } %>
  <%- } } do -%>
<%= f.input :password_score_custom, wrapper_html: { class: "form--medium", data: { password_score: "", password_score_label: "<('.' <)" } }, input_html: { data: { password_reveal: "" } } %>
  <%- end -%>

  <p>Password score comes with a helper to test if zxcbvn is available: <code>Ornament.C.FormPasswordScore.hasZxcvbn</code></p>
  <p>You can rebind password scores if you need to, for example if the form has been ajaxed in, with <code>Ornament.C.FormPasswordScore.init()</code></p>

  <hr />

  <h2 class="heading-two">Inline Fields and Field Caps</h2>

  <p>You can attach caps to fields using the <code>form-inline</code> wrapper class and the <code>form-inline--cap</code> class for the caps.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-cap" } do -%>
<%= form_control_group(:single_cap, f) do %>
  <div class="form-inline">
    <div class="form-inline--cap">$</div>
    <%= f.input_field :single_cap %>
  </div>
<% end %>
  <% end %>

  <p>Caps can appear on either side:</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-caps-double" } do -%>
<%= form_control_group(:double_cap, f) do %>
  <div class="form-inline">
    <div class="form-inline--cap">$</div>
    <%= f.input_field :double_cap %>
    <div class="form-inline--cap">.00</div>
  </div>
<% end %>
  <% end %>

  <p>Caps can be buttons, you don't need a <code>form-inline--cap</code> class.

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-cap-button" } do -%>
<%= form_control_group(:capped_button, f) do %>
  <div class="form-inline">
    <%= f.input_field :capped_button, placeholder: "my@email.com" %>
    <button type="button" class="button">Subscribe</button>
  </div>
<% end %>
  <% end %>

  <p>Caps can include icons and work fine with buttons in the mix too:</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-cap-and-button" } do -%>
<%= form_control_group(:icon_cap_and_capped_button, f) do %>
  <div class="form-inline">
    <div class="form-inline--cap">
      <%= icon("search", width: 16, height: 16) %>
    </div>
    <%= f.input_field :icon_cap_and_capped_button %>
    <button type="button" class="button button__icon icon--white">
      <%= icon("chevron_right", width: 11, height: 16) -%>
    </button>
  </div>
<% end %>
  <%- end -%>

  <p>Select menus can also take part in this pattern:</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-inline-select" } do -%>
<%= form_control_group(:inline_select, f) do %>
  <div class="form-inline">
    <%= f.input_field :inline_select, as: :select, collection: @months %>
    <button type="button" class="button">+ Add</button>
  </div>
<% end %>
  <%- end -%>

  <p>You can control the width of them using the regular <code>form--*</code> width classes.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-inline-short" } do -%>
<%= form_control_group(:short_capped_button, f, { class: "form--medium" }) do %>
  <div class="form-inline">
    <%= f.input_field :short_capped_button %>
    <button type="button" class="button button__icon icon--white">
      <%= icon("chevron_right", width: 11, height: 16) -%>
    </button>
  </div>
<% end %>
  <%- end -%>

  <p>Do be careful when adding caps and/or sizing your field. By default the input field will grow or shrink to fix the button or caps in the container.</p>
  <p>Caps and buttons will not get smaller.</p>
  <p>This <em>can</em> mean that the input fields are perfectly happy being reduced to zero pixel widths.</p>
  <p>Consider this when implementing caps, you may need to alter the layout at a certain breakpoint to ensure that the user experience isn't poorly affected.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-inline-dont-do-this" } do -%>
<div class="inputs">
  <%= form_control_group(:just_dont, f, { class: "form--x-small" }) do %>
    <div class="form-inline">
      <%= f.input_field :just_dont %>
      <button type="button" class="button">Subscribe</button>
    </div>
  <% end %>
</div>
  <%- end -%>

  <p>You can use this pattern to create flush inline sibling fields:</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-cap-button" } do -%>
<%= form_control_group(:inline_siblings, f) do %>
  <div class="form-inline">
    <%= f.input_field :inline_siblings_one, placeholder: "First Name" %>
    <%= f.input_field :inline_siblings_two, placeholder: "Last Name" %>
  </div>
<% end %>
  <% end %>

  <p>Why not add an input, select menu with a sizing class AND two buttons?</p>
  <p>Take note you can also provide a <code>form-*</code> sizing class to the sibling fields to control their width.</p>
  <p>Again take responsive considerations if doing something like this.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-cap-button" } do -%>
<%= form_control_group(:capped_sibling_fields_with_buttons, f) do %>
  <div class="form-inline">
    <div class="form-inline--cap">
      <%= icon("search", width: 16, height: 16) %>
    </div>
    <%= f.input_field :capped_sibling_fields_with_buttons_one, placeholder: "Search terms" %>
    <%= f.input_field :capped_sibling_fields_with_buttons_two, as: :select, collection: ["Everything", "Blogs", "Pages", "Events"], prompt: "Please select...", class: "form--auto" %>
    <button type="button" class="button__confirm">Search</button>
    <button type="button" class="button__cancel">Cancel</button>
  </div>
<% end %>
  <% end %>

  <hr />

  <h2 class="heading-two">Billing to Shipping</h2>

  <p><code>Ornament.C.FormBillingToShipping.create</code> is a really easy-to-use helper method to copy data from one group of fields to another group of fields when a checkbox is selected.</p>

  <p>All you need to do is first pass in the checkbox selector, then an object of key/value pair selectors matching the fields up.</p>

  <p>Combine with <code>show.js</code> to hide the second group of fields when the checkbox is selected for a nicer user experience.</p>

  <p>Take a look at the JS tab below to see how it works.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-single-checkbox-enhanced", js: capture { -%>
<%= yield :js_billing_to_shipping -%>
  <%- } } do -%>
<div class="inputs">
  <%= f.input :billing_address_1, wrapper_html: { class: "form--medium" } %>
  <%= f.input :billing_address_2, wrapper_html: { class: "form--medium" } %>
  <%= f.input :billing_state, wrapper_html: { class: "form--medium" } %>
  <%= f.input :billing_country, as: :string, wrapper_html: { class: "form--medium" } %>
  <%= f.input :use_billing_address, as: :boolean, wrapper_html: { class: "form--medium form--enhanced" } %>
  <div class="inputs" data-show="test_form_use_billing_address" data-show-inverse>
    <%= f.input :shipping_address_1, wrapper_html: { class: "form--medium" } %>
    <%= f.input :shipping_address_2, wrapper_html: { class: "form--medium" } %>
    <%= f.input :shipping_state, wrapper_html: { class: "form--medium" } %>
    <%= f.input :shipping_country, as: :string, wrapper_html: { class: "form--medium" } %>
  </div>
</div>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Sibling fields</h2>

  <p>Put two fields next to eachother by making them siblings:</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-siblings" } do -%>
<div class="form-siblings">
  <div class="form-siblings--sibling">
    <%= f.input :sibling_month, as: :select, collection: @months %>
  </div>
  <div class="form-siblings--sibling">
    <%= f.input :sibling_year, as: :select, collection: @years %>
  </div>
</div>
  <%- end -%>

  <p>These can be controlled with the form sizing classes above.</p>

<%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "form-siblings-small" } do -%>
<div class="form-siblings form--medium">
  <div class="form-siblings--sibling">
    <%= f.input :sibling_month_small, as: :select, collection: @months %>
  </div>
  <div class="form-siblings--sibling">
    <%= f.input :sibling_month_small, as: :select, collection: @years %>
  </div>
</div>
  <%- end -%>
  <% end %>

  <hr />

  <h2 class="heading-one">Long form example</h2>

  <div class="content">
    <p>Minim ex qui amet minim culpa et quis dolore consequat. Veniam sint est adipisicing elit sunt tempor aliquip enim laboris consequat minim. Laborum cupidatat quis irure aute quis esse dolor officia velit.</p>
    <p>Non irure aliqua amet consectetur esse sit esse exercitation incididunt duis aute consectetur ullamco. Voluptate Lorem consectetur mollit ipsum occaecat aliqua cillum nisi sunt tempor sint nostrud nostrud voluptate. Incididunt proident adipisicing duis deserunt laboris ipsum dolore aliqua et fugiat nostrud. Elit velit magna ullamco veniam mollit eiusmod est cupidatat.</p>
  </div>

  <%= simple_form_for :full_example, url: "/styleguide/form", html: { class: "form-embedded" }, remote: true do |f| %>

    <div class="inputs form--enhanced">
      <%= f.error_notification %>
      <h3 class="heading-five">About you</h3>
      <%= f.input :name, hint: "First and last name", input_html: { class: "form--medium" } %>
      <%= f.input :phone, error: "This field has errors", input_html: { class: "form--medium" } %>
      <%= f.input :email, input_html: { class: "form--medium" } %>
      <%= f.input :date_of_birth, input_html: { type: "date", class: "form--medium" } %>
      <%= f.input :country, as: :select, collection: @countries, prompt: "Please select", input_html: { class: "form--medium" } %>
      <%= f.input :state, as: :select, collection: ["SA", "NSW", "QLD", "TAS", "VIC", "WA", "NT", "ACT"], prompt: "Please select", wrapper_html: { data: { show: "full_example_country", show_option: "AU" } }, input_html: { class: "form--auto" } %>
      <h3 class="heading-five">About your submission</h3>
      <%= f.input :genre, as: :radio_buttons, collection: ["Comedy", "Drama", "Dramedy" ], hint: "Please choose only one." %>
      <%= f.input :tags, as: :check_boxes, collection: ["Funny", "Serious"], hint: "Please choose as many as you like." %>
      <h3 class="heading-five">Details</h3>
      <%= f.input :introduction, as: :text, hint: "Limited to 10 words only.", input_html: { class: "form--medium", data: { limiter: 10, limiter_word: "", limiter_micro: "" } } %>
      <%= f.input :message, as: :text, input_html: { class: "form--large" } %>
      <h3 class="heading-five">Expiry</h3>
      <div>
        <div class="form-siblings form--medium">
          <div class="form-siblings--sibling">
            <%= f.input :month %>
          </div>
          <div class="form-siblings--sibling">
            <%= f.input :year %>
          </div>
        </div>
      </div>
      <%= f.input :terms, as: :boolean, label: "I have read an accept the <a href='#' target='_blank'>terms and conditions</a>.".html_safe %>
    </div>
    <div class="actions">
      <%= f.button :button, "Submit", class: "button" %>
    </div>
  <% end %>

</div>
