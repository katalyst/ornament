<% content_for :title, "Selector" %>

<%- content_for :scripts do -%>
  <script>
    var sampleList = [
      <%- (1..25).each do |i| -%>
        {
          name: "<%= i.ordinalize -%>",
          value: "<%= i -%>",
          category: "<%= ['Category 1', 'Category 2', 'Category 3'].shuffle.first -%>"
        },
      <%- end -%>
    ]
  </script>
<%- end -%>

<div class="content-spacing">

  <p>Selector provides an easy way to manage a long list of items that user can select from.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "selector-1" } do -%>
<p>Example "hidden" field that the data is sent to:</p>

<input type="text" id="selector_1_field" />

<p>Example selector that sends values to the "hidden" field above:</p>
<div class="control-group">
  <input type="text" placeholder="Filter for your favourite number" class="" id="selector_1" />
</div>
<script>
  $(function(){
    $("#selector_1").katSelector({
      list: sampleList,
      hiddenField: $("#selector_1_field"),
      inputName: "example-1"
    });
  });
</script>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Custom list template</h2>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "selector-2" } do -%>
<div class="control-group">
  <input type="text" placeholder="Filter for your favourite number" class="" id="selector_2" />
</div>
<script>
  $(function(){
    $("#selector_2").katSelector({
      list: sampleList,
      inputName: "example-2",
      template: function(itemObject, item, label, title, option, $selector) {
        var custom_template = "<div class='category'>" + itemObject.category + "</div>";
        custom_template += "<div data-selector-name>" + itemObject.name + "</div>";
        return custom_template;
      }
    });
  });
</script>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Change callback</h2>

  <p>Text will update below the selector when you make a selection.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "selector-3" } do -%>
<div class="control-group">
  <input type="text" placeholder="Filter for your favourite number" class="" id="selector_3" />
  <p id="selector_3_callback_box"></p>
</div>
<script>
  $(function(){
    $("#selector_3").katSelector({
      list: sampleList,
      inputName: "example-3",
      onChange: function($selectedLabel, value){
        var callbackText = "Selected Value: " + value + ", " + "Field Label: " + $selectedLabel.text();
        if(value) {
          $("#selector_3_callback_box").text(callbackText);
        } else {
          $("#selector_3_callback_box").text("");
        }
      }
    }); 
  });
</script>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Checkbox with a holding area for selections</h2>

  <p>Text will update below the selector when you make a selection.</p>

  <%= render layout: "/layouts/styleguide/styleguide_feature", locals: { id: "selector-4" } do -%>
<div class="control-group">
  <input type="text" placeholder="Filter for your favourite number" class="" id="selector_4" />
  <input type="text" id="selector_4_field" />
</div>
<script>
  $(function(){
    var selector4Holding = [];

    $("#selector_4").katSelector({
      list: sampleList,
      checkbox: true,
      inputName: "example-4",
      onChange: function($selectedLabel, value, $selector) {
        var $holdingArea = $("#selector_4_callback_box");
        var $field       = $("#selector_4_field");
        // find all selected fields
        var checkedFields = $selector.find("input:checked");
        // reset holding array
        selector4Holding = [];
        // loop over each fields to find the checked ones
        $.each(checkedFields, function(){
          // push the IDs to the holding array
          var thisId = $(this).attr("id");
          selector4Holding.push(thisId);
        });
        // send value to hidden field
        $field.val(selector4Holding.toString());
      }
    });
  });
</script>
  <%- end -%>

  <hr />

  <h2 class="heading-two">Usage</h2>

  <p>Selector was created as a jQuery plugin so that you could pass in custom JSON lists. You can create a selector like so:</p>

  <pre class="prettyprint sg-pre">&lt;input type="text" id="my-selector" />

&lt;script>
  $(function(){
    $("#my-selector").katSelector({
      list: [{
        name: "Example 1",
        value: "example-1"
      }, {
        name: "Example 2",
        value: "example-2"
      }],
      inputName: "my-selector",
      hiddenField: null,
      checkbox: false,
      template: null,
      preventEnter: true,
      onChange: null,
      onListUpdate: null
    })
  });
&lt;/script></pre>

  <p>When using with SimpleForm and Ornament's SimpleForm initialiser, it helps to add <code>&lt;div class="control-group">&lt;/div></code> around the input field.</p>

  <hr />

  <h2 class="heading-two">Options, events and callbacks</h2>

  <h3 class="heading-three">Options</h3>

  <ul>
    <li>list: a JSON array of data to display in your selector</li>
    <li>inputName: used to differentiate your selector from other selectors on the page.</li>
    <li>hiddenField: a jQuery selector (eg. $("#my_field")) that will send and receive values from your selector.</li>
    <li>template: A custom template for displaying items in your selector.</li>
    <li>preventEnter: prevents the user from submitting the form.</li>
  </ul>

  <h3 class="heading-three">Callbacks</h3>

  <ul>
    <li>onChange: triggers after you make a selection from your selector.</li>
    <li>onListUpdate: triggers after the list has been updated/filtered.</li>
  </ul>

  <h3 class="heading-three">Events</h3>

  <ul>
    <li>$("#my-selector").trigger("selector:shadows"): refreshes the shadows on the list, helpful if showing/hiding selectors in tabs.</li>
  </ul>

</div>