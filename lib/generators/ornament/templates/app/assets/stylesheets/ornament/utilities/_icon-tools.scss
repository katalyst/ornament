// Extend grunt-icon URIs in to psuedo elements
@mixin grunticon($icon, $width, $height:$width, $psuedo:before) {
  position: relative;

  &:#{$psuedo} {
    @extend .grunticon-#{$icon};
    content: "";
    width: $width;
    height: $height;
  }
}

/* 

  Icon blocks are a block element with a centred icon inside it. 
  @include icon-block(["icon-name"], $block-width, $icon-width, $block-height, $icon-height);

  The mixin can be applied to an existing icon:

  @include grunticon("facebook", 24px);
  @include icon-block(44px, 24px);

  This will result in a 24x24 icon centred inside a 44x44 block.

  Alternatively you can provide a custom width and height to your
  grunticon but will need to provide it to the icon-block mixin
  as well:

  @include grunticon("facebook", 12px, 24px);
  @include icon-block(44px, 12px, 32px, 24px);

  This will result in a 12x24 icon centred inside a 44x32 block.

  This can be a bit verbose though so you can also optionally 
  pass an icon name in to the first argument of icon-block to
  not only define the icon block but the icon itself too.

  This results in the two mixins above being simplified as:

  @include icon-block("facebook", 44px, 12px, 44px, 24px);
*/
@mixin icon-block($block-size, $icon-size) {
  @include display-flex;
  @include align-items(center);
  @include justify-content(center);

  @if type-of($block-size) == "list" {
    width: nth($block-size, 1);
    height: nth($block-size, 2);
  } @else {
    width: $block-size;
    height: $block-size;
  }

  svg {
    display: block;
    margin: 0 auto;

    @if type-of($icon-size) == "list" {
      width: nth($icon-size, 1);
      height: nth($icon-size, 2);
    } @else {
      width: $icon-size;
      height: $icon-size;
    }
  }
}

// Inline Icons
// icons that sit next to some text
// pass in true to set the icon to the right of the text
@mixin icon-inline($right:false) {
  &:before {
    display: inline-block;
    position: relative;
    top: 3px;

    @if ($right == true) {
      float: right;
      margin-left: $xx-small-unit;
    } @else {
      margin-right: $xx-small-unit;
    }
  }
}

// Table Icons
// [td with icon] [td with text]
// used to vertically center a label against an icon
// but with allowance for the label to extend past the icon
@mixin icon-table($width:30px) {
  display: table;
  
  .icon-table--icon,
  .icon-table--label {
    display: table-cell;
  }

  .icon-table--icon {
    vertical-align: top;
    width: $width;
  }

  .icon-table--label {
    vertical-align: middle;
    padding-left: $xxx-small-unit;
  }
}